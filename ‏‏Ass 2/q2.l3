(define empty?
  (lambda (lst)
    (eq? lst '())))

(define last-element
   (lambda (lst)
      (if (empty?(cdr lst))
        (car lst)
        (last-element(cdr lst)))
  )
)

(define power
    (lambda (n1 n2)
       (if (= n2 0)
        1
        (* n1 (power n1 (- n2 1))))
    )
)

(define sum-lst-power
    (lambda (lst n)
       (if (empty? lst)
             0
             (+ (power (car lst) n) (sum-lst-power (cdr lst) n)))
    )
)
      
(define num-from-digits
  (lambda (lst)
     (num-from-digits2 lst 0)
  )
)

(define is-narcissistic
  (lambda (lst)
       (if (= (sum-lst-power lst (findLength lst)) (num-from-digits lst))
        #t
        #f)
    )
)
 

(define num-from-digits2
(lambda (lst acc)
  (if (empty? lst)
          acc
          (num-from-digits2 (cdr lst) (+ (* 10 acc) (car lst))))))


(define findLength
  (lambda (lst)
    (if (empty? lst)
        0
        (+ 1 (findLength (cdr lst))))))